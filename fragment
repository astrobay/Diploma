#version 330 core
out vec4 fragColor;

struct Material {
	vec3 ambient;
	vec3 diffuse;
	vec3 specular;
	float shininess;
};

struct Light {
	vec3 position;
	vec3 ambient;
	vec3 diffuse;
	vec3 specular;
};

in vec3 fragNormal;
in vec3 fragPos;

uniform vec3 viewPos;
uniform Material material;
uniform Light light;

void main()
{
	vec3 ambient = light.ambient*material.ambient;

	vec3 norm=normalize(fragNormal);
	vec3 lightDir=normalize(light.position-fragPos);
	float diff=max(dot(norm,lightDir),0.0f);
	vec3 diffuse=light.diffuse*(diff*material.diffuse);

	vec3 viewDir=normalize(viewPos-fragPos);
	vec3 reflectDir=reflect(-lightDir,norm);
	float spec=pow(max(dot(reflectDir,viewDir),0.0f),material.shininess);
	vec3 specular=light.specular*(spec*material.specular);

	vec3 result=ambient+diffuse+specular;
	fragColor=vec4(result,1.0f);
}
